local_costmap:
     
    ## Parameters for setting the threshold on obstacle information
    # obstacle_range <--> Robot will only updates its map with information about obstacle within this value
    # raytrace_range <--> Robot attempts to clear out space in front of its values' meter away given sensor readings
    obstacle_range : 0.2
    raytrace_range : 0.2
    # footprint describe the outfit of the robot >> assume the center is located at [0, 0]

    robot_radius: 0.185
    transform_tolerance: 2

    #set the update frequences (Hz)
    update_frequency: 5.0

    # set the publish frequency of the visualization information
    publish_frequency: 5.0

    # define what coordinate frames the costmap should run in 
    global_frame: base_link
    
    # the coordinate frame in costmap should reference for the base of the robot
    robot_base_frame: base_link
    
    # Whether or not the costmap initialize itself based on a map serverd by the map_server
    static_map: false
 
    # Whether the costmap will remain centered around the robot as the rovot moves through the world
    rolling_windows: true

    # Setting the width, height and resolution of the costmap || (meters) (meters/cell)
    width: 3.0
    height: 3.0
    resolution: 0.1
    origin_x: -1.5
    origin_y: -1.5

    # Constructing the Mulit-Layered Costmap
    plugins:
        - {name: sensor_obstacle, type: "costmap_2d::ObstacleLayer"}
        - {name: inflation, type: "costmap_2d::InflationLayer"}
    
    # Define each layer here ....
    sensor_obstacle:
        # Observation_sources <--> define a list of sensors going to pass infomation to costmap
        observation_sources: laser_scan_sensor
        laser_scan_sensor: {sensor_frame: laser, data_type: LaserScan, topic: scan, marking: true, clearing: true}
    inflation:
        inflation_radius: 0.05
        cost_scaling_factor: 1.0
